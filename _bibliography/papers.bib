---
---

@inproceedings{houdaille_polyglot_2023,
	title = {Polyglot {AST}: Towards Enabling Polyglot Code Analysis},
	url = {https://ieeexplore.ieee.org/abstract/document/10321867},
	doi = {10.1109/ICECCS59891.2023.00023},
	shorttitle = {Polyglot {AST}},
	abstract = {Today, a plethora of programming languages exists, each better suited for a particular concern. For example, Python is suited for data analysis but not web development, whereas {JavaScript} is the inverse. As software complexity grows and needs to address multiple concerns, different programming languages are often used in combination, despite the burden of bridging them (e.g., using Java Native Interface). Polyglot programming emerged as a solution allowing the seamless mixing of multiple programming languages. {GraalVM} and {PolyNote} are examples of runtimes allowing polyglot programming. However, there is a striking lack of support at design time for building and analyzing polyglot code. To the best of our knowledge, there is no uniform language-agnostic way of reasoning over multiple languages to provide seamless code analysis, since each language comes with its own form of Abstract Syntax Trees ({AST}). In this paper, we present an approach to build a uniform yet polyglot {AST} over polyglot code, so that it is easier to perform global analysis. We first motivate this challenge and identify the main requirements for building a polyglot {AST}. We then propose a proof of concept implementation of our solutions on {GraalVM}’s polyglot {API}. On top of the polyglot {AST}, we demonstrate the ability to implement several polyglot-specific analysis services, namely auto-completion, consistency checking, type inference, and rename refactoring. Our evaluation on three polyglot projects taken from {GitHub}, and involving {JavaScript} and Python code, shows that we can build a polyglot {AST} without significant overhead. We also demonstrate the usefulness of the polyglot analysis services through the provided automation, as well as their scalability.},
	eventtitle = {2023 27th International Conference on Engineering of Complex Computer Systems ({ICECCS})},
	pages = {116--125},
	booktitle = {2023 27th International Conference on Engineering of Complex Computer Systems ({ICECCS})},
	author = {Houdaille, Philémon and Khelladi, Djamel Eddine and Briend, Romain and Jongeling, Robbert and Combemale, Benoit},
	urldate = {2024-11-04},

  	year = {2023},
	note = {{ISSN}: 2770-8535},
	keywords = {Buildings, code analysis, Codes, development tooling, Java, polyglot programming, Programming, Runtime, Scalability, Syntactics},
}

@inproceedings{houdaille_polyglot_2024,
	location = {New York, {NY}, {USA}},
	title = {On Polyglot Program Testing},
	isbn = {979-8-4007-0658-5},
	url = {https://dl.acm.org/doi/10.1145/3663529.3663787},
	doi = {10.1145/3663529.3663787},
	series = {{FSE} 2024},
	abstract = {In modern applications, it has become increasingly necessary to use multiple languages in a coordinated way to deal with the complexity and diversity of concerns encountered during development. This practice is known as polyglot programming. However, while execution platforms for polyglot programs are increasingly mature, there is a lack of support in how to test polyglot programs. This paper is a first step to increase awareness about polyglot testing efforts. It provides an overview of how polyglot programs are constructed, and an analysis of the impact on test writing at its different steps. More specifically, we focus on dynamic white box testing, and how polyglot programming impacts selection of input data, scenario specification and execution, and oracle expression. We discuss the related challenges in particular with regards to the current state of the practice. We envision in this paper to raise interest in polyglot program testing within the software engineering community, and help in defining directions for future work.},
	pages = {507--511},
	booktitle = {Companion Proceedings of the 32nd {ACM} International Conference on the Foundations of Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Houdaille, Philémon and Khelladi, Djamel Eddine and Combemale, Benoit and Mussbacher, Gunter},
	urldate = {2024-11-04},

  	year = {2024},
}


@article{houdaille_polydebug_2025,
	title = {{PolyDebug}: a Framework for Polyglot Debugging},
	volume = {9},
	url = {https://hal.science/hal-04906879},
	doi = {10.22152/programming-journal.org/2025/10/13},
	shorttitle = {{PolyDebug}},
	abstract = {As software grows increasingly complex, the quantity and diversity of concerns to be addressed also rises. To answer this diversity of concerns, developers may end up using multiple programming languages in a single software project, a practice known as polyglot programming. This practice has gained momentum with the rise of execution platforms capable of supporting polyglot systems.However, despite this momentum, there is a notable lack of development tooling support for developers working on polyglot programs, such as in debugging facilities. Not all polyglot execution platforms provide debugging capabilities, and for those that do, implementing support for new languages can be costly.This paper addresses this gap by introducing a novel debugger framework that is language-agnostic yet leverages existing language-specific debuggers. The proposed framework is dynamically extensible to accommodate the evolving combination of languages used in polyglot software development. It utilizes the Debug Adapter Protocol ({DAP}) to integrate and coordinate existing debuggers within a debugging session.We found that using our approach, we were able to implement polyglot debugging support for three different languages with little development effort. We also found that our debugger did not introduce an overhead significant enough to hinder debugging tasks in many scenarios; however performance did deteriorate with the amount of polyglot calls, making the approach not suitable for every polyglot program structure.The effectiveness of this approach is demonstrated through the development of a prototype, {PolyDebug}, and its application to use cases involving C, {JavaScript}, and Python. We evaluated {PolyDebug} on a dataset of traditional benchmark programs, modified to fit our criteria of polyglot programs. We also assessed the development effort by measuring the source lines of code ({SLOC}) for the prototype as a whole as well as its components.Debugging is a fundamental part of developing and maintaining software. Lack of debug tools can lead to difficulty in locating software bugs and slow down the development process. We believe this work is relevant to help provide developers proper debugging support regardless of the runtime environment.{CCS} Concepts: • Software and its engineering → Software testing and debugging; Interoperability; Abstraction, modeling and modularity; Software architectures.},
	number = {3},
	journaltitle = {The Art, Science, and Engineering of Programming},
	author = {Houdaille, Philémon and Khelladi, Djamel Eddine and Combemale, Benoit and Mussbacher, Gunter and van Der Storm, Tijs},
	urldate = {2025-01-30},
	year = {2025},
	note = {Publisher: aosa, Inc.},
	keywords = {debugging, debugging polyglot programming tool modularity, polyglot programming, tool modularity},
}